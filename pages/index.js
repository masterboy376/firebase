import Head from 'next/head'
import { useState, useEffect } from 'react';
import styles from '../styles/Home.module.css'
import { initializeApp } from "firebase/app";
// import { getAnalytics } from "firebase/analytics";
import { getAuth, createUserWithEmailAndPassword, signOut, signInWithEmailAndPassword, sendPasswordResetEmail, updateProfile } from "firebase/auth";
import { getDatabase, ref, set, onValue, remove, child, push, update , runTransaction } from "firebase/database";

const firebaseConfig = {
  apiKey: "AIzaSyC10lviYE8F9sJSOmR3pAPYJ9XwwiwG5xc",
  authDomain: "fir-project-76d42.firebaseapp.com",
  projectId: "fir-project-76d42",
  storageBucket: "fir-project-76d42.appspot.com",
  messagingSenderId: "775403613850",
  appId: "1:775403613850:web:6a78231ef195bd069eb923",
  measurementId: "G-H7R6CB1CE0",
  databaseURL: 'https://fir-project-76d42-default-rtdb.firebaseio.com'
};

export default function Home() {


  const app = initializeApp(firebaseConfig);

  const database = getDatabase(app);

  const auth = getAuth(app)

  const [cred, setCred] = useState({ email: '', password: '' })
  const [name, setName] = useState('')
  const [user, setUser] = useState()
  const [username, setUsername] = useState()
  const [isLoggedin, setIsloggedin] = useState(false)

  const onChange = (e) => {
    setCred({ ...cred, [e.target.name]: e.target.value })
  }

  const signup = (e) => {
    e.preventDefault()
    console.log(cred)
    createUserWithEmailAndPassword(auth, cred.email, cred.password)
      .then((userCredential) => {
        // Signed in 
        setUser(auth.currentUser)
        console.log(auth.currentUser)
        setIsloggedin(true)
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorMessage)
        // ..
      });
  }

  const login = (e) => {
    e.preventDefault()
    console.log(cred)
    signInWithEmailAndPassword(auth, cred.email, cred.password)
      .then((userCredential) => {
        setUser(auth.currentUser)
        console.log(auth.currentUser)
        setIsloggedin(true)
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorMessage)
      });
  }

  const logout = () => {
    signOut(auth).then(() => {
      setUser(null)
      setIsloggedin(false)
    }).catch((error) => {
      // An error happened.
    });
  }

  const reset = (e) => {
    sendPasswordResetEmail(auth, cred.email)
      .then(() => {
        // Password reset email sent!
        // ..
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorMessage)
        // ..
      });
  }

  const update = (e) => {
    updateProfile(auth.currentUser, { displayName: name }).then(() => {
      // Profile updated!
      // ...
    }).catch((error) => {
      // An error occurred
      // ...
    })
  }

  //---------------------------------------------------------------------------------------
  //realtime db
  const write = (userId, name) => {
    set(ref(database, 'users/' + userId), {
      username: name
    }).then(() => {
      // Data saved successfully!
    }).catch((error) => {
      console.log(error.message)
    });
  }

  const deleteRdb = () => {
    remove(ref(database, 'users/' + user.uid)).then(() => {
      console.log(`deleted rdb belonging to ${user.uid}`)
    }).catch((error) => {
      console.log(error.message)
    });;
  }

  // const updateRdb = () => {
  //   // Get a key for a new Post.
  //   const updates={}
  //   updates[`/users/${user.uid}/username`] = name;
  //   console.log(updates)
  //   update(ref(database), updates)
  // };

useEffect(() => {
  if (isLoggedin) {
    onValue((ref(database, 'users/' + user.uid)), (user) => {
      if (user.val() != undefined) {
        setUsername(user.val().username)
      }
    }, (error) => {
      console.error(error);
    })
  }
}, [isLoggedin])

const addBalance = ()=>{
  runTransaction(ref(database, '/accounts/123453423'), (acc)=>{
    console.log(acc)
    if(acc){
      acc.balance = acc.balance + 500;
    }
    return acc;
  })
}

return (
  <div className={styles.container}>
    <Head>
      <title>Firebase Authentication</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    {
      isLoggedin ?
        <main className={styles.main}>
          <p>{user.email}</p>
          <p>{user.displayName}</p>
          <p>realtime: {username}</p>
          <input onChange={(e) => { setName(e.target.value) }} type="text" name="name" />
          <button type="button" onClick={logout}>logout</button>
          <button type="button" onClick={update}>update the user</button>
          <button type="button" onClick={deleteRdb}>delete rdb</button>
          <button type="button" onClick={()=>{
            const updates = {}
            updates["users/"+user.uid+"/username"] = name
            update(ref(database), updates)
          }}>update rdb</button>
          <button type="button" onClick={() => {
            write(user.uid, name)
          }}>write to rdb</button>
          <button type="button" onClick={addBalance}>add balance</button>
        </main>
        :
        <main className={styles.main}>
          {/* <from onSubmit={signup}> */}
          <input onChange={onChange} type="email" name="email" />
          <input onChange={onChange} type="password" name="password" />
          <button type="submit" onClick={login}>login</button>
          <button type="submit" onClick={signup}>signup</button>
          <button type="submit" onClick={reset}>reset</button>
          {/* </from> */}
        </main>
    }
  </div>
)
}
